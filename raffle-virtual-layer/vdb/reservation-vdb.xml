<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vdb name="reservation" version="1">

  <description>Reservation VDB</description>
      <model name="Monolith" visible="false">
        <property name="importer.useFullSchemaName" value="false"/>
        <property name="importer.TableTypes" value="TABLE" />
        <property name="importer.importKeys" value="false"/>
        <property name="importer.schemapattern" value="public"/>
        <source name="monolithdb" translator-name="postgresql" connection-jndi-name="java:/monolithdb"/>
    </model>
    <model name="DataServiceLayer" type="VIRTUAL" visible="true">
        <metadata type="DDL"><![CDATA[

    	CREATE VIEW reservation(
            id string(256) NOT NULL,
            customer_id integer NOT NULL,
            hotel_name string(256) NOT NULL,
            hotel_city string(256) NOT NULL,
            hotel_country string(256) NOT NULL,
            checkin date NOT NULL,
            checkout date NOT NULL,
            status string(256) NOT NULL,
            CONSTRAINT user_pk PRIMARY KEY(id)
        ) OPTIONS(UPDATABLE 'TRUE')
        AS
            SELECT
                r.id,
                r.customer_id,
                h.name,
                hc.name,
                hy.name,
                r.checkin,
                r.checkout,
                r.status
            FROM
                Monolith.reservation as r
	            inner join Monolith.room rm on (r.room_id = rm.id)
              	inner join Monolith.hotel as h on (rm.hotel_id = h.id)
              	inner join Monolith.city as hc on (h.city_id = hc.id)
              	inner join Monolith.country as hy on (hc.country_id = hy.id);

        CREATE TRIGGER ON reservation INSTEAD OF UPDATE AS 
            FOR EACH ROW
        BEGIN ATOMIC
            IF(CHANGING.status)
            BEGIN
                UPDATE Monolith.reservation SET status = "NEW".status WHERE id = "OLD".id;
            END
        END;

        CREATE VIEW source_reservation(
            id string(256) NOT NULL,
            customer_id integer NOT NULL,
            room_id integer NOT NULL,
            checkin date NOT NULL,
            checkout date NOT NULL,
            daily_rate bigdecimal NOT NULL,
            status string(256) NOT NULL,
            CONSTRAINT source_reservation_pk PRIMARY KEY(id)
        ) OPTIONS(UPDATABLE 'TRUE')
        AS
            SELECT
                *
            FROM
                Monolith.reservation as r;

        CREATE VIEW reservation_full(
            id string(256) NOT NULL,
            checkin date NOT NULL,
            checkout date NOT NULL,
            daily_rate bigdecimal NOT NULL,
            status string(256) NOT NULL,
            cust_name string(256) NOT NULL,
            cust_email string(256) NOT NULL,
            cust_member_since date NOT NULL,
            cust_rewards_id string(256) NOT NULL,
            cust_address string(256) NOT NULL,
            cust_city string(256) NOT NULL,
            cust_postal_code string(256) NOT NULL,
            cust_country string(256) NOT NULL,
            hotel_name string(256) NOT NULL,
            hotel_address string(256) NOT NULL,
            hotel_city string(256) NOT NULL,
            hotel_postal_code string(256) NOT NULL,
            hotel_country string(256) NOT NULL,
            room_number string(256) NOT NULL,
            room_floor integer NOT NULL,
            living_area boolean NOT NULL,
            microwave boolean NOT NULL,
            num_adjoining_rooms integer NOT NULL,
            num_double_beds integer NOT NULL,
            num_king_beds integer NOT NULL,
            num_pets integer NOT NULL,
            num_pullouts integer NOT NULL,
            num_queen_beds integer NOT NULL,
            refrigerator boolean NOT NULL,
            smoking boolean NOT NULL,
            CONSTRAINT reservation_pk PRIMARY KEY(id)
        )
        AS
            SELECT
                r.id,
                r.checkin,
                r.checkout,
                r.daily_rate,
                r.status,
                c.name,
                c.email,
                c.member_since,
                c.rewards_id,
                c.address_line_1,
                cc.name,
                cc.postal_code,
                cy.name,
                h.name,
                h.address_line_1,
                hc.name,
                hc.postal_code,
                hy.name,
                rm.room_number,
                rm.floor,
                rc.living_area,
                rc.microwave,
                rc.num_adjoining_rooms,
                rc.num_double_beds,
                rc.num_king_beds,
                rc.num_pets,
                rc.num_pullouts,
                rc.num_queen_beds,
                rc.refrigerator,
                rc.smoking
            FROM
                Monolith.reservation as r inner join Monolith.customer as c on (r.customer_id = c.id)
	              inner join Monolith.city as cc on (c.city_id = cc.id)
	              inner join Monolith.country as cy on (cc.country_id = cy.id)
	              inner join Monolith.room rm on (r.room_id = rm.id)
	              inner join Monolith.room_config as rc on (rm.room_config_id = rc.id)
	              inner join Monolith.hotel as h on (rm.hotel_id = h.id)
	              inner join Monolith.city as hc on (h.city_id = hc.id)
	              inner join Monolith.country as hy on (hc.country_id = hy.id);
        ]]></metadata>
    </model>
</vdb>